#!/bin/bash

# Global utility functions
ExitIfNoVariablesLocalOnlyFile() {
    if [ $? -ne 0 ]; then
        echo -e ${red}The variables-local-only.azcli file is not present.${reset}
        echo -e ${red}'Create a file named variables-local-only.azcli with the following content (replacing the values between <...>):'${reset}
        echo -e ${cyan}'#!/bin/bash'${reset}
        echo -e ${cyan}'SUBSCRIPTION=<AZURE_SUBCRIPTION_ID_HERE>'${reset}
        echo -e ${cyan}'VM_EDGE_ADMIN_USER=<VM_EDGE_ADMIN_USER_NAME_HERE>'${reset}
        echo -e ${cyan}'VM_EDGE_ADMIN_PASS=<VM_EDGE_ADMIN_USER_PASS_HERE>'${reset}
        echo -e ${red}Exiting...${reset}
        exit 1
    fi
}

ExitIfNotSuccessful() {
    if [ $? -eq 0 ]; then
        echo -e ${green}Command completed successfully${reset}
    else
        echo -e ${red}Command failed, exiting...${reset}
        exit 1
    fi
}

EchoLocalVariables() {
    echo -e ${green}Local variables in use:${blue}
    echo -e SUBSCRIPTION=$SUBSCRIPTION
    echo -e VM_EDGE_ADMIN_USER=$VM_EDGE_ADMIN_USER
    echo -e VM_EDGE_ADMIN_PASS=$VM_EDGE_ADMIN_PASS
    echo -e ${reset}    
}

CreateSymetricKeyBase64() {
    openssl rand 32 | base64 -w 0
}

CreateDeviceSymetricKeyBase64() {
    resource_group=$1   # Resource Group
    dps_name=$2         # DPS name
    enrollment_id=$3    # Enrollment Id
    registration_id=$4  # Registration Id

    key=$(az iot dps enrollment-group show \
        --resource-group $resource_group \
        --dps-name $dps_name \
        --enrollment-id $enrollment_id \
        --show-keys true \
        | jq .attestation.symmetricKey.primaryKey)
    
    # Note: the next command is In Preview
    echo $(az iot dps compute-device-key \
        --symmetric-key $key \
        --registration-id $registration_id)
}

GetACRPassword() {
    resource_group=$1   # Resource Group
    acr_name=$2         # ACR name

    az acr credential show --name $acr_name --resource-group $resource_group | jq '.passwords[0].value'
}

GetACRResourceId() {
    subscription=$1    # Subscription
    resource_group=$2  # Resource Group
    acr_name=$3        # ACR name

    echo "/subscriptions/$subscription/resourceGroups/$resource_group/providers/Microsoft.ContainerRegistry/registries/$acr_name"
}

GetDPSScopeId() {
    dps_name=$1     # DPS name

    az iot dps show --name $dps_name | jq .properties.idScope
}

GetDPSResourceId() {
    subscription=$1    # Subscription
    resource_group=$2  # Resource Group
    dps_name=$3        # DPS name

    echo "/subscriptions/$subscription/resourceGroups/$resource_group/providers/Microsoft.Devices/ProvisioningServices/$dps_name"
}

GetIoTHubConnectionString() {
    iothub_name=$1  # IoTHub name

    az iot hub connection-string show --hub-name $iothub_name | jq --raw-output '.connectionString'
}

GetIoTHubSharedAccessKey() {
    iothub_name=$1  # IoTHub name
    key_name=$2     # Key name

    az iot hub policy list --hub-name $iothub_name | jq --raw-output --arg key_name "$key_name" '.[] | select(.keyName==$key_name).primaryKey'
}

GetIoTHubResourceId() {
    subscription=$1    # Subscription
    resource_group=$2  # Resource Group
    iothub_name=$3     # IoT Hub name

    echo "/subscriptions/$subscription/resourceGroups/$resource_group/providers/Microsoft.Devices/IotHubs/$iothub_name"
}

GetVNetSubnetResourceId() {
    subscription=$1    # Subscription
    resource_group=$2  # Resource Group
    vnet=$3            # VNet
    subnet=$4          # Subnet

    echo "/subscriptions/$subscription/resourceGroups/$resource_group/providers/Microsoft.Network/virtualNetworks/$vnet/subnets/$subnet"
}

GetPrivateEndpointCustomDnsConfigZoneName() {
    resource_group=$1       # Resource Group
    pe_name=$2              # Private Endpoint name
    fqdn_end=$3             # Fully Qualified Domain Name end
    resource_name=$4        # (Optional) Resource name

    fqdn=$( 
        az network private-endpoint show \
            --resource-group $resource_group \
            --name $pe_name | \
                jq --raw-output --arg fqdn "$resource_name.$fqdn_end" '.customDnsConfigs[] | select(.fqdn | endswith($fqdn)).fqdn' \
    )

    echo ${fqdn//.$fqdn_end/}   # ${VARIABLE/SEARCH_PATTERN/REPLACEMENT}
}

GetPrivateEndpointCustomDnsConfigFirstIpAddress() {
    resource_group=$1   # Resource Group
    pe_name=$2          # Private Endpoint name
    fqdn_end=$3         # Fully Qualified Domain Name end
    resource_name=$4    # (Optional) Resource name

    az network private-endpoint show \
        --resource-group $resource_group \
        --name $pe_name | \
            jq --raw-output --arg fqdn "$resource_name.$fqdn_end" '.customDnsConfigs[] | select(.fqdn | endswith($fqdn)).ipAddresses[0]'
}

GetStorageConnectionString() {
    account_name=$1 # Storage Account name

    account_key=$(GetStorageKey $account_name)

    echo "DefaultEndpointsProtocol=https;AccountName=$account_name;AccountKey=$account_key;EndpointSuffix=core.windows.net"
}

GetStorageKey() {
    account_name=$1 # Storage Account name

    az storage account keys list --account-name $account_name | jq --raw-output '.[0].value'
}