#!/bin/bash

# Global utility functions
ExitIfNoVariablesLocalOnlyFile() {
    if [ $? -ne 0 ]; then
        echo -e ${red}The variables-local-only.azcli file is not present.${reset}
        echo -e ${red}'Create a file named variables-local-only.azcli with the following content (replacing the values between <...>):'${reset}
        echo -e ${cyan}'#!/bin/bash'${reset}
        echo -e ${cyan}'SUBSCRIPTION=<AZURE_SUBCRIPTION_ID_HERE>'${reset}
        echo -e ${cyan}'VM_EDGE_ADMIN_USER=<VM_EDGE_ADMIN_USER_NAME_HERE>'${reset}
        echo -e ${cyan}'VM_EDGE_ADMIN_PASS=<VM_EDGE_ADMIN_USER_PASS_HERE>'${reset}
        echo -e ${red}Exiting...${reset}
        exit 1
    fi
}

ExitIfNotSucessfull() {
    if [ $? -eq 0 ]; then
        echo -e ${green}Command completed successfully${reset}
    else
        echo -e ${red}Command failed, exiting...${reset}
        exit 1
    fi
}

EchoLocalVariables() {
    echo -e ${green}Local variables in use:${blue}
    echo -e SUBSCRIPTION=$SUBSCRIPTION
    echo -e VM_EDGE_ADMIN_USER=$VM_EDGE_ADMIN_USER
    echo -e VM_EDGE_ADMIN_PASS=$VM_EDGE_ADMIN_PASS
    echo -e ${reset}    
}

GetACRPassword() {
    resource_group=$1   # Resource Group
    acr_name=$2         # ACR name
    az acr credential show --name $acr_name --resource-group $resource_group | jq '.passwords[0].value'
}

CreateSymetricKeyBase64() {
    openssl rand 32 | base64 -w 0
}

CreateDeviceSymetricKeyBase64() {
    resource_group=$1   # Resource Group
    dps_name=$2         # DPS name
    enrollment_id=$3    # Enrollment Id
    registration_id=$4  # Registration Id

    key=$(az iot dps enrollment-group show \
        --resource-group $resource_group \
        --dps-name $dps_name \
        --enrollment-id $enrollment_id \
        --show-keys true \
        | jq .attestation.symmetricKey.primaryKey)
    
    # Note: the next command is In Preview
    echo $(az iot dps compute-device-key \
        --symmetric-key $key \
        --registration-id $registration_id)
}

GetDPSScopeId() {
    dps_name=$1     # DPS name
    az iot dps show --name $dps_name | jq .properties.idScope
}

GetIoTHubConnectionString() {
    iothub_name=$1  #IoTHub name
    az iot hub connection-string show --hub-name $iothub_name | jq --raw-output '.connectionString'
}