#!/bin/bash

# Load the colors
. colors.azcli

# Load global functions
. bash-functions.azcli

# Import the local only (git ignored) variables that contain sensible data, like azure subscription id, credentials, etc...
. variables-local-only.azcli
ExitIfNoVariablesLocalOnlyFile
EchoLocalVariables

# Load the variables
. variables.azcli

# Azure IoTHub configuration
echo -e ${green}Azure IoTHub configuration${reset}

# Create the Azure IoTHub
echo -e ${cyan}Create the Azure IoTHub${reset}
az iot hub create \
    --name $IOTHUB_NAME \
    --resource-group $RESOURCE_GROUP \
    --sku $IOTHUB_SKU \
    --retention-day $IOTHUB_RETENTION_DAY
ExitIfNotSuccessful

# Enable a System Managed Identity for the IoT Hub
# (required to support IoT Hub routing to Blob storage when network public access is disabled and connections are done via the Private Link)
# For more info see: https://github.com/MicrosoftDocs/azure-docs/issues/67795
echo -e ${cyan}Enable a System Managed Identity for the IoT Hub${reset}
az iot hub update \
    --name $IOTHUB_NAME \
    --set identity.type="SystemAssigned"
ExitIfNotSuccessful

# Get the ACR password
echo -e ${cyan}Get the ACR password${reset}
password=$(GetACRPassword $RESOURCE_GROUP $ACR_NAME)
ExitIfNotSuccessful

# Use the manifest template of the system modules to copy to the desired manifest
echo -e ${cyan}Use the manifest template of the system modules to copy to the desired manifest${reset}
cp \
    $IOTHUB_EDGE_DEPLOYMENT_FILEPATH_SYSTEM_MODULES_TEMPLATE \
    $IOTHUB_EDGE_DEPLOYMENT_FILEPATH_SYSTEM_MODULES
ExitIfNotSuccessful

# Use the manifest template of the simulated temperature module to create a proper manifest
echo -e ${cyan}Use the manifest template of the simulated temperature module to create a proper manifest${reset}
sed \
    -e "s#<ENTER ACR NAME HERE>#${ACR_NAME}#g" \
    -e "s#\(.\"address\": \).*#\1\"${ACR_NAME}.${ACR_DOMAIN}\",#g" \
    -e "s#\(.\"username\": \).*#\1\"${ACR_NAME}\",#g" \
    -e "s#\(.\"password\": \).*#\1${password}#g" \
    -e "s#\(.\"image\": \).*#\1\"${ACR_NAME}.${ACR_DOMAIN}/${ACR_IMAGE_SIMULATOR}\",#g" \
    $IOTHUB_EDGE_DEPLOYMENT_FILEPATH_SIMULATED_TEMPERATURE_TEMPLATE \
    > $IOTHUB_EDGE_DEPLOYMENT_FILEPATH_SIMULATED_TEMPERATURE
ExitIfNotSuccessful

# Create the Edge Deployments 
#  - System Modules - Normal
echo -e "${cyan}Create the Edge Deployments (System [Normal], Simulated Temperature [Layered])${reset}"
az iot edge deployment create \
    --deployment-id $IOTHUB_EDGE_DEPLOYMENT_ID_SYSTEM_MODULES \
    --hub-name $IOTHUB_NAME \
    --content $IOTHUB_EDGE_DEPLOYMENT_FILEPATH_SYSTEM_MODULES \
    --target-condition "$IOTHUB_EDGE_DEPLOYMENT_TARGET_CONDITION" \
    --priority $IOTHUB_EDGE_DEPLOYMENT_PRIORITY_SYSTEM_MODULES
ExitIfNotSuccessful
#  - Simulated Temperature - Layered
az iot edge deployment create \
    --deployment-id $IOTHUB_EDGE_DEPLOYMENT_ID_SIMULATED_TEMPERATURE \
    --hub-name $IOTHUB_NAME \
    --content $IOTHUB_EDGE_DEPLOYMENT_FILEPATH_SIMULATED_TEMPERATURE \
    --target-condition "$IOTHUB_EDGE_DEPLOYMENT_TARGET_CONDITION" \
    --priority $IOTHUB_EDGE_DEPLOYMENT_PRIORITY_SIMULATED_TEMPERATURE \
    --layered true
ExitIfNotSuccessful


# Create a storage Account for IoT Hub message routing
echo -e ${cyan}Create a storage Account for IoT Hub message routing${reset}
az storage account create \
    --resource-group $RESOURCE_GROUP \
    --name $IOTHUB_STORAGE_ACCOUNT_NAME \
    --sku $IOTHUB_STORAGE_SKU \
    --allow-blob-public-access $IOTHUB_STORAGE_ALLOW_BLOB_PUBLIC_ACCESS \
    --kind $IOTHUB_STORAGE_KIND
ExitIfNotSuccessful

# Create a storage Account container for IoT Hub message routing
echo -e ${cyan}Create a storage Account container for IoT Hub message routing${reset}
az storage container create \
    --resource-group $RESOURCE_GROUP \
    --account-name $IOTHUB_STORAGE_ACCOUNT_NAME \
    --name $IOTHUB_ROUTING_CONTAINER_NAME \
    --auth-mode $IOTHUB_STORAGE_CONTAINER_AUTH_MODE
ExitIfNotSuccessful

# Provide the IoT Hub System Managed Service Identity the role Storage Blob Data Contributor on the IoT Hub Storage Account
# This is required to support IoT Hub message routing to Storage Account when the Storage Account does not allow public connectivity
# For more info see:
#  https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-managed-identity
#  https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support#egress-connectivity-from-iot-hub-to-other-azure-resources
echo -e ${cyan}Provide the IoT Hub System Managed Service Identity the role Storage Blob Data Contributor on the IoT Hub Storage Account${reset}
app_id=$(GetAADServicePrincipalAppId $IOTHUB_NAME)
iothub_storage_resource_id=$(GetStorageResourceId $SUBSCRIPTION $RESOURCE_GROUP $IOTHUB_STORAGE_ACCOUNT_NAME)
az role assignment create \
    --assignee $app_id \
    --role "Storage Blob Data Contributor" \
    --scope $iothub_storage_resource_id
ExitIfNotSuccessful

# Get the storage Account connection string (only needed if the auth-type below is 'keybase')
# echo -e ${cyan}Get the storage Account connection string${reset}
# connection_string=$(GetStorageConnectionString $IOTHUB_STORAGE_ACCOUNT_NAME)
# ExitIfNotSuccessful

# Create the Routing Endpoint for the storage Account
echo -e ${cyan}Create the Routing Endpoint for the storage Account${reset}
az iot hub routing-endpoint create \
    --endpoint-subscription-id $SUBSCRIPTION \
    --resource-group $RESOURCE_GROUP \
    --hub-name $IOTHUB_NAME \
    --endpoint-resource-group $RESOURCE_GROUP \
    --endpoint-name $IOTHUB_ROUTING_ENDPOINT_NAME \
    --endpoint-type $IOTHUB_ROUTING_ENDPOINT_TYPE \
    --auth-type $IOTHUB_ROUTING_AUTH_TYPE \
    --batch-frequency $IOTHUB_ROUTING_BATCH_FREQUENCY \
    --container-name $IOTHUB_ROUTING_CONTAINER_NAME \
    --encoding $IOTHUB_ROUTING_ENCODING #\
    #--connection-string $connection_string     # Set it only if the auth-type is 'keybase'
    # [--file-name-format] # The file name format must contain {iothub}, {partition}, {YYYY}, {MM}, {DD}, {HH} and {mm} fields. All parameters are mandatory but can be reordered with or without delimiters.  Default: {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}
ExitIfNotSuccessful

# Create the Route to the storage Account Routing Endpoint
echo -e ${cyan}Create the Route to the storage Account Routing Endpoint${reset}
az iot hub route create \
    --resource-group $RESOURCE_GROUP \
    --endpoint-name $IOTHUB_ROUTING_ENDPOINT_NAME \
    --hub-name $IOTHUB_NAME \
    --name $IOTHUB_ROUTE_NAME \
    --source $IOTHUB_ROUTE_SOURCE \
    --condition $IOTHUB_ROUTE_CONDITION
ExitIfNotSuccessful

# Create the Route to the built-in events Endpoint 
echo -e ${cyan}Create the Route to the built-in events Endpoint${reset}
az iot hub route create \
    --resource-group $RESOURCE_GROUP \
    --endpoint-name $IOTHUB_BUILTIN_ROUTING_ENDPOINT_NAME \
    --hub-name $IOTHUB_NAME \
    --name $IOTHUB_BUILTIN_ROUTE_NAME \
    --source $IOTHUB_BUILTIN_ROUTE_SOURCE \
    --condition $IOTHUB_BUILTIN_ROUTE_CONDITION
ExitIfNotSuccessful